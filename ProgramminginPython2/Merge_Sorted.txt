Merge Sorted Lists
Description
Until now you have been doing problems with just one iterator. Now, let's add another dimension to our coding skills with a few problems where it will be easier and faster to do similar things with two iterators. You are given two sorted lists. You have to merge those such that the output is also sorted. Now, of course, you can merge and then use the sorted function. But that would be doing it in O(n*log(n)) Time and wheres the fun in that. Let's see if you can do it in O(n).


Input:
Two lines of input 
Each line will have a sorted list

Output:
Sorted merged list 


Sample input:
[1, 3, 5, 7, 9, 10]
[2, 3, 4, 5, 6, 8, 11, 12, 13]

Sample output:
[1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13]

#Solution
import ast
a=input()
a = ast.literal_eval(a)
b=input()
b = ast.literal_eval(b)
c = []
l1 = len(a)
l2 = len(b)
i =0 
j = 0
#print("l1",l1)
#print("l2",l2-1)
while(i<=(l1)) and (j<=(l2)) :
    #print("i",i)
    #print("j",j)
    if(l1 != i) and (l2 !=j):
        if(a[i]<b[j]):
            c.append(a[i])
            i = i+1
        elif(a[i]<=b[j]):
            c.append(a[i])
            c.append(b[j])
            i = i+1
            j=j+1
        else:
            c.append(b[j])
            j = j+1
    elif(l2 == j) and (l1 != i):
        #print("l2",l2)
        #print("l1",l1)
        #i=i+1
        #print("i chec",i)
        c.append(a[i])
        i = i+1
    elif((l1 == i) and (l2 != j)):
        c.append(b[j])
        j = j+1
    else:
        break
    #print(c)
print(c)

