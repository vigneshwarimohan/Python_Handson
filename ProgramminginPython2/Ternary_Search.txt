Ternary Search
Description
In the binary search, you kept reducing the search space into half of the previous search space. In this question, can you similarly reduce the search space in one-third of the last space search and write a searching algorithm?

----------------------------------------------------------------------
Input:
A non-empty sorted list of unique integers in line one
The integer key to be found in line two

Output:
Index of the element key if it is present in the list, else -1

----------------------------------------------------------------------
Sample input:
[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
17

Sample output:
7

----------------------------------------------------------------------
Sample input:
[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
1


Sample output:
-1

#Solution
import ast
a=input()
a = ast.literal_eval(a)
key=int(input())
l=0
r= len(a)-1
def Ternary_search(l,r,key,a):

    while(l<=r):
        midpt1 = l + (r-l) // 3
        midpt2 = r - (r-l) // 3
    
        if(key == a[midpt1]):
            return midpt1
            break
        elif(key == a[midpt2]): 
            return midpt2
            break
        elif(key < a[midpt1]):
            r = midpt1 - 1
        elif(key > a[midpt2]):
            l = midpt2 + 1
        else:
    # key lies between mid1 and mid2
            l = midpt1 + 1
            r = midpt2 - 1
    return(-1)      
        
    
print(Ternary_search(l,r,key,a))