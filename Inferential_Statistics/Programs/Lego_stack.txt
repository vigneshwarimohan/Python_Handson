Lego Stack
You are given a row of Lego Blocks consisting of n blocks. All the blocks given have a square base whose side length is known. You need to stack the blocks over each other and create a vertical tower. Block-1 can go over Block-2 only if sideLength(Block-2)>sideLength(Block-1).
From the row of Lego blocks, you on only pick up either the leftmost or rightmost block.
Print "Possible" if it is possible to stack all n cubes this way or else print "Impossible".

Input Format:
The input will contain a list of n integers representing the side length of each block's base in the row starting from the leftmost.

Sample Input:
[5 ,4, 2, 1, 4 ,5]
Sample Output:
Possible

import ast,sys
input_str = sys.stdin.read()
l = ast.literal_eval(input_str)#list of side lengths
k = len(l)
new_lego = []
while(len(l)):
    #print("New:",new_lego)
    if(len(new_lego) == 0):
        if(len(l) == 1) and (l[0] == 0):
            print("Impossible")
            break
        elif(len(l) == 1) and (l[0] != 0):
            new_lego.append(l[0])
            l.pop(0)
        else:
            res =  [ l[i] for i in (0, -1) ]
            #print(res)
            if(res[0]>res[1]):
                new_lego.append(res[0])
                l.pop(0)

            elif(res[0]<res[1]):
                new_lego.append(res[1])
                l.pop(-1)
            else:
                new_lego.append(res[1])
                new_lego.append(res[0])
                l.pop(0)
                l.pop(-1)
    else:
        if(len(l) != 1):
            res =  [ l[i] for i in (0, -1) ]
            if(new_lego[-1]>=res[0] and new_lego[-1]>=res[1]):
                if(res[0]>res[1]):
                    new_lego.append(res[0])
                    #print(l)
                    l.pop(0)
                elif(res[0]<res[1]):
                    new_lego.append(res[1])
                    l.pop(-1)
                else:
                    new_lego.append(res[1])
                    new_lego.append(res[0])
                    l.pop(0)
                    l.pop(-1)
            else:
                print("Impossible")
                break
        else:
            if(new_lego[-1]>=l[-1]) or (new_lego[-1] == l[-1]):
                new_lego.append(l[-1])
                l.pop(0)
            else:
                print("Impossible")
                break

    if(k == len(new_lego)):
        print("Possible")
*****************************************************************************************************
Upgrad_solution
import ast,sys
input_str = sys.stdin.read()
sides = ast.literal_eval(input_str)#list of side lengths
l=len(sides)
diff = [(sides[i]-sides[i+1]) for i in range(l-1)]
i = 0 
while (i<l-1 and diff[i]>=0) : i += 1 
while (i<l-1 and diff[i]<=0) : i += 1
if (i==l-1) : print("Possible") 
else : print("Impossible")		